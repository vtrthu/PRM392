// Generated by view binder compiler. Do not edit!
package com.example.aviatorcrash.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.aviatorcrash.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityChangePasswordBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageButton backButton;

  @NonNull
  public final MaterialButton cancelButton;

  @NonNull
  public final MaterialButton changePasswordButton;

  @NonNull
  public final TextInputEditText confirmPasswordInput;

  @NonNull
  public final TextInputEditText currentPasswordInput;

  @NonNull
  public final TextInputEditText newPasswordInput;

  @NonNull
  public final TextView requirementDifferent;

  @NonNull
  public final TextView requirementLength;

  @NonNull
  public final TextView requirementMatch;

  private ActivityChangePasswordBinding(@NonNull ScrollView rootView,
      @NonNull ImageButton backButton, @NonNull MaterialButton cancelButton,
      @NonNull MaterialButton changePasswordButton, @NonNull TextInputEditText confirmPasswordInput,
      @NonNull TextInputEditText currentPasswordInput, @NonNull TextInputEditText newPasswordInput,
      @NonNull TextView requirementDifferent, @NonNull TextView requirementLength,
      @NonNull TextView requirementMatch) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.cancelButton = cancelButton;
    this.changePasswordButton = changePasswordButton;
    this.confirmPasswordInput = confirmPasswordInput;
    this.currentPasswordInput = currentPasswordInput;
    this.newPasswordInput = newPasswordInput;
    this.requirementDifferent = requirementDifferent;
    this.requirementLength = requirementLength;
    this.requirementMatch = requirementMatch;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityChangePasswordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityChangePasswordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_change_password, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityChangePasswordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button;
      ImageButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.cancel_button;
      MaterialButton cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.change_password_button;
      MaterialButton changePasswordButton = ViewBindings.findChildViewById(rootView, id);
      if (changePasswordButton == null) {
        break missingId;
      }

      id = R.id.confirm_password_input;
      TextInputEditText confirmPasswordInput = ViewBindings.findChildViewById(rootView, id);
      if (confirmPasswordInput == null) {
        break missingId;
      }

      id = R.id.current_password_input;
      TextInputEditText currentPasswordInput = ViewBindings.findChildViewById(rootView, id);
      if (currentPasswordInput == null) {
        break missingId;
      }

      id = R.id.new_password_input;
      TextInputEditText newPasswordInput = ViewBindings.findChildViewById(rootView, id);
      if (newPasswordInput == null) {
        break missingId;
      }

      id = R.id.requirement_different;
      TextView requirementDifferent = ViewBindings.findChildViewById(rootView, id);
      if (requirementDifferent == null) {
        break missingId;
      }

      id = R.id.requirement_length;
      TextView requirementLength = ViewBindings.findChildViewById(rootView, id);
      if (requirementLength == null) {
        break missingId;
      }

      id = R.id.requirement_match;
      TextView requirementMatch = ViewBindings.findChildViewById(rootView, id);
      if (requirementMatch == null) {
        break missingId;
      }

      return new ActivityChangePasswordBinding((ScrollView) rootView, backButton, cancelButton,
          changePasswordButton, confirmPasswordInput, currentPasswordInput, newPasswordInput,
          requirementDifferent, requirementLength, requirementMatch);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
