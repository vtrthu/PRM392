// Generated by view binder compiler. Do not edit!
package com.example.aviatorcrash.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.aviatorcrash.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGameBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBar;

  @NonNull
  public final ImageButton backButton;

  @NonNull
  public final TextView balanceText;

  @NonNull
  public final TextInputEditText betAmountInput;

  @NonNull
  public final TextInputLayout betAmountLayout;

  @NonNull
  public final LinearLayout bettingControls;

  @NonNull
  public final MaterialButton cashoutButton;

  @NonNull
  public final MaterialCardView controlsContainer;

  @NonNull
  public final TextView crashPointText;

  @NonNull
  public final TextView currentBetText;

  @NonNull
  public final ConstraintLayout gameArea;

  @NonNull
  public final ConstraintLayout gameControls;

  @NonNull
  public final TextView gameStatus;

  @NonNull
  public final TextView multiplierText;

  @NonNull
  public final MaterialButton nextRoundButton;

  @NonNull
  public final MaterialButton placeBetButton;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView winAmountText;

  private ActivityGameBinding(@NonNull ConstraintLayout rootView, @NonNull AppBarLayout appBar,
      @NonNull ImageButton backButton, @NonNull TextView balanceText,
      @NonNull TextInputEditText betAmountInput, @NonNull TextInputLayout betAmountLayout,
      @NonNull LinearLayout bettingControls, @NonNull MaterialButton cashoutButton,
      @NonNull MaterialCardView controlsContainer, @NonNull TextView crashPointText,
      @NonNull TextView currentBetText, @NonNull ConstraintLayout gameArea,
      @NonNull ConstraintLayout gameControls, @NonNull TextView gameStatus,
      @NonNull TextView multiplierText, @NonNull MaterialButton nextRoundButton,
      @NonNull MaterialButton placeBetButton, @NonNull Toolbar toolbar,
      @NonNull TextView winAmountText) {
    this.rootView = rootView;
    this.appBar = appBar;
    this.backButton = backButton;
    this.balanceText = balanceText;
    this.betAmountInput = betAmountInput;
    this.betAmountLayout = betAmountLayout;
    this.bettingControls = bettingControls;
    this.cashoutButton = cashoutButton;
    this.controlsContainer = controlsContainer;
    this.crashPointText = crashPointText;
    this.currentBetText = currentBetText;
    this.gameArea = gameArea;
    this.gameControls = gameControls;
    this.gameStatus = gameStatus;
    this.multiplierText = multiplierText;
    this.nextRoundButton = nextRoundButton;
    this.placeBetButton = placeBetButton;
    this.toolbar = toolbar;
    this.winAmountText = winAmountText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_game, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar;
      AppBarLayout appBar = ViewBindings.findChildViewById(rootView, id);
      if (appBar == null) {
        break missingId;
      }

      id = R.id.back_button;
      ImageButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.balance_text;
      TextView balanceText = ViewBindings.findChildViewById(rootView, id);
      if (balanceText == null) {
        break missingId;
      }

      id = R.id.bet_amount_input;
      TextInputEditText betAmountInput = ViewBindings.findChildViewById(rootView, id);
      if (betAmountInput == null) {
        break missingId;
      }

      id = R.id.bet_amount_layout;
      TextInputLayout betAmountLayout = ViewBindings.findChildViewById(rootView, id);
      if (betAmountLayout == null) {
        break missingId;
      }

      id = R.id.betting_controls;
      LinearLayout bettingControls = ViewBindings.findChildViewById(rootView, id);
      if (bettingControls == null) {
        break missingId;
      }

      id = R.id.cashout_button;
      MaterialButton cashoutButton = ViewBindings.findChildViewById(rootView, id);
      if (cashoutButton == null) {
        break missingId;
      }

      id = R.id.controls_container;
      MaterialCardView controlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (controlsContainer == null) {
        break missingId;
      }

      id = R.id.crash_point_text;
      TextView crashPointText = ViewBindings.findChildViewById(rootView, id);
      if (crashPointText == null) {
        break missingId;
      }

      id = R.id.current_bet_text;
      TextView currentBetText = ViewBindings.findChildViewById(rootView, id);
      if (currentBetText == null) {
        break missingId;
      }

      id = R.id.game_area;
      ConstraintLayout gameArea = ViewBindings.findChildViewById(rootView, id);
      if (gameArea == null) {
        break missingId;
      }

      id = R.id.game_controls;
      ConstraintLayout gameControls = ViewBindings.findChildViewById(rootView, id);
      if (gameControls == null) {
        break missingId;
      }

      id = R.id.game_status;
      TextView gameStatus = ViewBindings.findChildViewById(rootView, id);
      if (gameStatus == null) {
        break missingId;
      }

      id = R.id.multiplier_text;
      TextView multiplierText = ViewBindings.findChildViewById(rootView, id);
      if (multiplierText == null) {
        break missingId;
      }

      id = R.id.next_round_button;
      MaterialButton nextRoundButton = ViewBindings.findChildViewById(rootView, id);
      if (nextRoundButton == null) {
        break missingId;
      }

      id = R.id.place_bet_button;
      MaterialButton placeBetButton = ViewBindings.findChildViewById(rootView, id);
      if (placeBetButton == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.win_amount_text;
      TextView winAmountText = ViewBindings.findChildViewById(rootView, id);
      if (winAmountText == null) {
        break missingId;
      }

      return new ActivityGameBinding((ConstraintLayout) rootView, appBar, backButton, balanceText,
          betAmountInput, betAmountLayout, bettingControls, cashoutButton, controlsContainer,
          crashPointText, currentBetText, gameArea, gameControls, gameStatus, multiplierText,
          nextRoundButton, placeBetButton, toolbar, winAmountText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
